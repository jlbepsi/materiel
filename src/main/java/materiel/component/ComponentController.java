package materiel.component;

import materiel.Application;
import materiel.GenericResponse;
import materiel.ResourceNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class ComponentController {

    private static final Logger log = LoggerFactory.getLogger(Application.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ComponentRepository componentRepository;

    // Get all Component
    @GetMapping(path="/components")
    public @ResponseBody Iterable<Component> getAllItems() {
        // This returns a JSON or XML with the items
        return componentRepository.findAllOrOrderByCategory();
    }

    // Get a single Component
    @GetMapping("/components/{id}")
    public @ResponseBody
    Component getItemById(@PathVariable(value = "id") long itemId) {
        Optional<Component> user = componentRepository.findById(itemId);
        if (user == null || user.get() == null)
            throw new ResourceNotFoundException("Component", "id", itemId);

        return user.get();
    }

    // Add a new Component
        @PostMapping(path="/components") // Map ONLY POST Requests
    public @ResponseBody
    Component addNewItem (@Valid @RequestBody Component user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        return componentRepository.save(user);
    }

    // Update a Component
    @PutMapping("/components/{id}")
    public @ResponseBody
    Component updateItem(@PathVariable(value = "id") long itemId,
                         @Valid @RequestBody Component componentDetails) {

        Component component = componentRepository.findById(itemId)
                .orElseThrow(() -> new ResourceNotFoundException("Component", "id", itemId));

        component.setLibelle(componentDetails.getLibelle());
        component.setQuantitystock(componentDetails.getQuantitystock());

        return componentRepository.save(component);
    }

    // Delete a Component
    @DeleteMapping(path = "/componentsK19c/{id}")
    public @ResponseBody
    ResponseEntity<?> deleteItem(@PathVariable(value = "id") long itemId)
    {
        Component component = componentRepository.findById(itemId)
                .orElseThrow(() -> new ResourceNotFoundException("Component", "id", itemId));

        componentRepository.delete(component);
        return ResponseEntity.ok().body(new GenericResponse(true, "Suppression effectu√©e"));
    }
}
