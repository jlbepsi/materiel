package materiel.portable;

import materiel.GenericResponse;
import materiel.ResourceNotFoundException;
import materiel.emprunt.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
/* CrossOrigin(origins = "http://localhost:3000")*/
public class PortablemiController {
    @Autowired // This means to get the bean called portablemiRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PortablemiRepository portablemiRepository;

    @Autowired
    private UserRepository userRepository;


    // Get all Portablemis
    @GetMapping(path="/portables")
    public @ResponseBody Iterable<Portable> getAllPortablemis() {
        // This returns a JSON or XML with the portables
        return portablemiRepository.findAll();
    }

    // Get a single Portable
    @GetMapping("/portables/{id}")
    public @ResponseBody
    Portable getPortablemiByMi(@PathVariable(value = "id") int portableMi) {
        Optional<Portable> portable = portablemiRepository.findById(portableMi);
        if (portable == null || portable.get() == null)
            throw new ResourceNotFoundException("Portable", "id", portableMi);

        return portable.get();
    }

    // Add a new Portable
    @PostMapping(path="/portables") // Map ONLY POST Requests
    public @ResponseBody
    Portable addNewPortablemi (@Valid @RequestBody Portable portablemi) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        return portablemiRepository.save(portablemi);
    }

    // Update a Portable
    @PutMapping("/portables/{id}")
    public @ResponseBody
    Portable updatePortablemi(@PathVariable(value = "id") int portableMi,
                              @Valid @RequestBody Portable portablemiDetails) {

        Portable portablemi = portablemiRepository.findById(portableMi)
                .orElseThrow(() -> new ResourceNotFoundException("Portable", "id", portableMi));

        // Pour être sûr
        portablemiDetails.setMi(portablemi.getMi());

        return portablemiRepository.save(portablemiDetails);
    }

    // Delete a Portable
    @DeleteMapping(path = "/portables/{id}")
    public @ResponseBody
    ResponseEntity<?> deletePortablemi(@PathVariable(value = "id") int portableMi)
    {
        Portable portablemi = portablemiRepository.findById(portableMi)
                .orElseThrow(() -> new ResourceNotFoundException("Portable", "id", portableMi));

        portablemiRepository.delete(portablemi);

        return ResponseEntity.ok().body(new GenericResponse(true, "Suppression effectuée"));
    }
}
