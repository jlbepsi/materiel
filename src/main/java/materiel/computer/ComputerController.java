package materiel.computer;

import materiel.Application;
import materiel.GenericResponse;
import materiel.ResourceNotFoundException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class ComputerController {

    private static final Logger log = LoggerFactory.getLogger(Application.class);

    @Autowired // This means to get the bean called computerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ComputerRepository computerRepository;

    // Get all Computer
    @GetMapping(path="/computers")
    public @ResponseBody Iterable<Computer> getAllComputers() {
        // This returns a JSON or XML with the items
        return computerRepository.findAll();
    }

    // Get all Computer by place
    @GetMapping(path="/computers/place/{place}")
    public @ResponseBody Iterable<Computer> getAllComputersByPlace(@PathVariable(value = "place") String place) {
        // This returns a JSON or XML with the items
        return computerRepository.findAllByPlace(place);
    }

    // Get a single Computer
    @GetMapping("/computers/{id}")
    public @ResponseBody
    Computer getComputerById(@PathVariable(value = "id") long itemId) {
        Optional<Computer> computer = computerRepository.findById(itemId);
        if (computer == null || computer.get() == null)
            throw new ResourceNotFoundException("Computer", "id", itemId);

        return computer.get();
    }

    // Add a new Computer
    @PostMapping(path="/computers") // Map ONLY POST Requests
    public @ResponseBody Computer addNewComputer (@Valid @RequestBody Computer computer) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        return computerRepository.save(computer);
    }

    // Update a Computer
    @PutMapping("/computers/{id}")
    public @ResponseBody Computer updateComputer(@PathVariable(value = "id") long itemId,
                                                 @Valid @RequestBody Computer itemDetails) {

        Computer item = computerRepository.findById(itemId)
                .orElseThrow(() -> new ResourceNotFoundException("Computer", "id", itemId));

        item.setLibelle(itemDetails.getLibelle());
        item.setPlace(itemDetails.getPlace());

        return computerRepository.save(item);
    }

    // Delete a Computer
    @DeleteMapping(path = "/computers/{id}")
    public @ResponseBody
    ResponseEntity<?> deleteComputer(@PathVariable(value = "id") long itemId)
    {
        Computer item = computerRepository.findById(itemId)
                .orElseThrow(() -> new ResourceNotFoundException("Computer", "id", itemId));

        computerRepository.delete(item);
        return ResponseEntity.ok().body(new GenericResponse(true, "Suppression effectu√©e"));
    }
}
