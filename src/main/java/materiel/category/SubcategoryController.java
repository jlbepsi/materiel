package materiel.category;

import materiel.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
public class SubcategoryController {
    @Autowired // This means to get the bean called subCategoryRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SubcategoryRepository subCategoryRepository;


    // Get all Subcategorys
    @GetMapping(path="/subcategories")
    public @ResponseBody Iterable<Subcategory> getAllSubcategorys() {
        // This returns a JSON or XML with the  subCategorys
        return subCategoryRepository.findAll();
    }

    // Get all Subcategorys by category
    @GetMapping(path="/subcategories/category/{id}")
    public @ResponseBody Iterable<Subcategory> getAllSubcategorysByCategory(@PathVariable(value = "id") Integer categoryId) {
        // This returns a JSON or XML with the  subCategorys
        return subCategoryRepository.findAllByCategory(categoryId);
    }

    // Get a single Subcategory
    @GetMapping("/subcategories/{id}")
    public @ResponseBody Subcategory getSubcategoryById(@PathVariable(value = "id") Integer subCategoryId) {
        Optional<Subcategory>  subCategory = subCategoryRepository.findById(subCategoryId);
        if ( subCategory == null ||  subCategory.get() == null)
            throw new ResourceNotFoundException("Subcategory", "id", subCategoryId);

        return  subCategory.get();
    }

    // Add a new Subcategory
    @PostMapping(path="/subcategories") // Map ONLY POST Requests
    public @ResponseBody Subcategory addNewSubcategory (@Valid @RequestBody Subcategory subCategory) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        return subCategoryRepository.save( subCategory);
    }

    // Update a Subcategory
    @PutMapping("/subcategories/{id}")
    public @ResponseBody Subcategory updateSubcategory(@PathVariable(value = "id") Integer subCategoryId,
                                         @Valid @RequestBody Subcategory subCategoryDetails) {

        Subcategory subCategory = subCategoryRepository.findById(subCategoryId)
                .orElseThrow(() -> new ResourceNotFoundException("Subcategory", "id", subCategoryId));

        subCategory.setLibelle(subCategoryDetails.getLibelle());
        subCategory.setCategory(subCategoryDetails.getCategory());

        return subCategoryRepository.save(subCategory);
    }

    // Delete a Subcategory
    @DeleteMapping(path = "/subcategories/{id}")
    public @ResponseBody
    ResponseEntity<?> deleteSubcategory(@PathVariable(value = "id") Integer subCategoryId)
    {
        Subcategory category = subCategoryRepository.findById(subCategoryId)
                .orElseThrow(() -> new ResourceNotFoundException("Subcategory", "id", subCategoryId));

        subCategoryRepository.delete(category);
        return  ResponseEntity.ok().build();
    }
}
